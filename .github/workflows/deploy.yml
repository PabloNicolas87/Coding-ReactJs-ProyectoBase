name: CI/CD ‚Äì Build & Publish Docker Image

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VERSION: latest
      DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      
      # ‚ö†Ô∏è NUEVA VARIABLE: Define el nombre del repositorio ECR (sin el URI completo)
      ECR_REPOSITORY_NAME: proyectobase-runtime # <--- Mismo nombre que la imagen Docker Hub
      
    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üîñ Determine version tag
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "VERSION=latest" >> $GITHUB_ENV
          fi

      - name: üõ†Ô∏è Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üß™ Run tests
        run: npm run test

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # --- NUEVOS PASOS: AUTENTICACI√ìN AWS y LOGIN ECR ---
      
      - name: ‚öôÔ∏è Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üê≥ Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      # --- PASO EXISTENTE: LOGIN DOCKER HUB ---
      
      - name: üê≥ Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- L√ìGICA DE BUILD/PUSH DUAL (Reemplaza los dos pasos anteriores de push) ---

      # üî® BUILDER IMAGE (Solo se construye, ya que no la necesitamos en ECR)
      - name: üî® Build BUILDER image
        run: |
          docker build --target builder \
            -t ${DOCKER_USER}/proyectobase-builder:${{ env.VERSION }} \
            -t ${DOCKER_USER}/proyectobase-builder:latest .
          docker push ${DOCKER_USER}/proyectobase-builder:${{ env.VERSION }}
          docker push ${DOCKER_USER}/proyectobase-builder:latest

      # ‚öôÔ∏è RUNTIME IMAGE (Construcci√≥n √önica y Push Dual)
      - name: ‚öôÔ∏è Build & Push RUNTIME image (Docker Hub + ECR)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # 1. Definir Tags para ambos registros
          DOCKERHUB_TAGS="${{ env.DOCKER_USER }}/proyectobase-runtime:${{ env.VERSION }} ${{ env.DOCKER_USER }}/proyectobase-runtime:latest"
          ECR_TAGS="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ env.VERSION }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:latest"
          ALL_TAGS="$DOCKERHUB_TAGS $ECR_TAGS"
          
          # 2. Construir UNA VEZ con todos los tags
          docker build --target production -t $ALL_TAGS .
          
          # 3. PUSH Dual: Empujar a Docker Hub
          docker push ${{ env.DOCKER_USER }}/proyectobase-runtime:${{ env.VERSION }}
          docker push ${{ env.DOCKER_USER }}/proyectobase-runtime:latest

          # 4. PUSH Dual: Empujar a ECR
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ env.VERSION }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:latest

      - name: üßπ Clean up dangling images
        run: docker image prune -f