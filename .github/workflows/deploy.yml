name: CI/CD – Build & Publish Docker Image

on:
  push:
    branches: [ main ]

    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VERSION: latest
      DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}

    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🔖 Determine version tag
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "VERSION=latest" >> $GITHUB_ENV
          fi

      - name: 🛠️ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: 📦 Install dependencies
        run: npm ci

      - name: ⚙️ Build project
        run: npm run build

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🐳 Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🔨 Build & Push BUILDER image
        run: |
          docker build --target builder \
            -t ${DOCKER_USER}/proyectobase-builder:${{ env.VERSION }} \
            -t ${DOCKER_USER}/proyectobase-builder:latest .
          docker push ${DOCKER_USER}/proyectobase-builder:${{ env.VERSION }}
          docker push ${DOCKER_USER}/proyectobase-builder:latest

      - name: ⚙️ Build & Push RUNTIME image
        run: |
          docker build --target production \
            -t ${DOCKER_USER}/proyectobase-runtime:${{ env.VERSION }} \
            -t ${DOCKER_USER}/proyectobase-runtime:latest .
          docker push ${DOCKER_USER}/proyectobase-runtime:${{ env.VERSION }}
          docker push ${DOCKER_USER}/proyectobase-runtime:latest

      - name: 🧹 Clean up dangling images
        run: docker image prune -f

