name: CI/CD – Build & Publish Docker Image

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VERSION: latest
      DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      ECR_REPOSITORY_NAME: proyectobase-runtime
      
    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🔖 Determine version tag
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "VERSION=latest" >> $GITHUB_ENV
          fi

      - name: 🛠️ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm run test

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      # --- AUTENTICACIÓN AWS y LOGIN ECR ---
      
      - name: ⚙️ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🐳 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: 🐳 Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- CONSTRUCCIÓN Y PUSH DUAL ---
      
      - name: 🔨 Build & Push BUILDER image (Docker Hub Only)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: builder
          push: true
          tags: |
            ${{ env.DOCKER_USER }}/proyectobase-builder:${{ env.VERSION }}
            ${{ env.DOCKER_USER }}/proyectobase-builder:latest

      - name: ⚙️ Build & Push RUNTIME image (Dual Push)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: true
          tags: |
            ${{ env.DOCKER_USER }}/proyectobase-runtime:${{ env.VERSION }}
            ${{ env.DOCKER_USER }}/proyectobase-runtime:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:${{ env.VERSION }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:latest

      - name: 🧹 Clean up dangling images
        run: docker image prune -f

      # --- 🚀 PASO FINAL: DEPLOY A EC2 VÍA SSM CLI ---
      - name: 🚀 Deploy to EC2 via SSM Run Command (CLI)
        id: deploy_ssm
        run: |
          echo "Sending deployment commands to EC2 instance..."
          
          INSTANCE_ID="${{ secrets.AWS_INSTANCE_ID }}"
          REGION="${{ secrets.AWS_REGION }}"
          ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
          ECR_REPO_URL="$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/proyectobase-runtime:latest"
          cat > ssm_params.json <<EOF
          {
            "commands": [
              "sudo docker ps -q | xargs -r sudo docker stop || true",
              "sudo docker ps -aq | xargs -r sudo docker rm || true",
              "sudo aws ecr get-login-password --region $REGION | sudo docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com",
              "sudo docker pull $ECR_REPO_URL",
              "sudo docker run -d -p 80:80 $ECR_REPO_URL",
              "echo 'Deployment finished!'"
            ]
          }
          EOF

          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters file://ssm_params.json \
            --region "$REGION"

