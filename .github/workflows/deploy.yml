name: CI/CD ‚Äì Build & Publish Docker Image

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VERSION: latest
      DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      # Variable ECR: Debe coincidir con el repositorio creado en AWS
      ECR_REPOSITORY_NAME: proyectobase-runtime
      
    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üîñ Determine version tag
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "VERSION=latest" >> $GITHUB_ENV
          fi

      - name: üõ†Ô∏è Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üß™ Run tests
        run: npm run test

      # Configuraci√≥n de Docker Buildx
      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      # --- AUTENTICACI√ìN AWS y LOGIN ECR ---
      
      - name: ‚öôÔ∏è Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Es CR√çTICO que el IAM User usado aqu√≠ tenga permisos para:
          # 1. Acceder a ECR (ecr:*)
          # 2. Actualizar ECS (ecs:UpdateService)
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üê≥ Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      # --- LOGIN DOCKER HUB ---
      
      - name: üê≥ Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- CONSTRUCCI√ìN Y PUSH DUAL ---
      
      # üî® BUILDER IMAGE (Push SOLO a Docker Hub)
      - name: üî® Build & Push BUILDER image (Docker Hub Only)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: builder
          push: true
          tags: |
            ${{ env.DOCKER_USER }}/proyectobase-builder:${{ env.VERSION }}
            ${{ env.DOCKER_USER }}/proyectobase-builder:latest

      # ‚öôÔ∏è RUNTIME IMAGE (Construcci√≥n √önica y Push Dual a Docker Hub y ECR)
      - name: ‚öôÔ∏è Build & Push RUNTIME image (Dual Push)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: true
          tags: |
            ${{ env.DOCKER_USER }}/proyectobase-runtime:${{ env.VERSION }}
            ${{ env.DOCKER_USER }}/proyectobase-runtime:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:${{ env.VERSION }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:latest

      - name: üßπ Clean up dangling images
        run: docker image prune -f

      # --- üöÄ PASO NUEVO: DEPLOY A ECS (CD) ---
      - name: üöÄ Force New Deployment on ECS Service
        run: |
          echo "Deploying new image to ECS..."
          aws ecs update-service \
            --cluster frontend-cluster \
            --service frontend-service \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}
          echo "Deployment initiated. ECS will now pull the latest image from ECR."